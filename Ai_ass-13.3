{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP+ZXW0Dh/O867VJfidbePz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Task Description #1 – Remove Repetition"],"metadata":{"id":"bMR54GvYTDdb"}},{"cell_type":"markdown","source":["PROMPT : def calculate_area(shape, x, y=0): if shape == \"rectangle\": return x * y elif shape == \"square\": return x * x elif shape == \"circle\": return 3.14 * x * x refactor the above code"],"metadata":{"id":"F-BYODuwScyK"}},{"cell_type":"code","metadata":{"id":"c17ecd60","executionInfo":{"status":"ok","timestamp":1758794150869,"user_tz":-330,"elapsed":4,"user":{"displayName":"GULLAPELLY ANVITH SAI","userId":"01437972785711821807"}}},"source":["import math\n","\n","def calculate_area(shape, x, y=None):\n","    if shape == \"rectangle\":\n","        if y is not None:\n","            return x * y\n","        else:\n","            return \"For a rectangle, please provide both length (x) and width (y).\"\n","    elif shape == \"square\":\n","        return x * x\n","    elif shape == \"circle\":\n","        return math.pi * x * x\n","    else:\n","        return \"Unsupported shape. Please use 'rectangle', 'square', or 'circle'.\""],"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["OBSERVATION : here after refactoring the redundant code the refactored code contains more detailed structural format and uses dictionary based pre built functions"],"metadata":{"id":"wGBJah8lTzc6"}},{"cell_type":"markdown","source":["Task Description #2 – Error Handling in Legacy Code"],"metadata":{"id":"anSn4OjiVtck"}},{"cell_type":"markdown","source":["PROMPT : def read_file(filename): f = open(filename, \"r\") data = f.read() f.close() return data rectify the code refactor the error"],"metadata":{"id":"zza085FYWt1c"}},{"cell_type":"code","metadata":{"id":"6274a499","executionInfo":{"status":"ok","timestamp":1758796282365,"user_tz":-330,"elapsed":42,"user":{"displayName":"GULLAPELLY ANVITH SAI","userId":"01437972785711821807"}}},"source":["def read_file(filename):\n","    try:\n","        with open(filename, \"r\") as f:\n","            data = f.read()\n","        return data\n","    except FileNotFoundError:\n","        return f\"Error: File '{filename}' not found.\"\n","    except Exception as e:\n","        return f\"An error occurred: {e}\""],"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":["OBSERVATION : Instead of open() fuction after refactoring the code try-except was replaced. previously with the refactor code we may get error if the file is not available then we may get error. After refactoring with try-except function we will not get any errors"],"metadata":{"id":"IQ2-aqtVXMok"}},{"cell_type":"markdown","source":["Task Description #3 – Complex Refactoring"],"metadata":{"id":"s7SJQyuZa769"}},{"cell_type":"markdown","source":["PROMPT : class Student: def __init__(self, n, a, m1, m2, m3): self.n = n self.a = a self.m1 = m1 self.m2 = m2 self.m3 = m3 def details(self): print(\"Name:\", self.n, \"Age:\", self.a) def total(self): return self.m1+self.m2+self.m3 give the code after complex refactoring"],"metadata":{"id":"yyFqQCDJdP_O"}},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"952e4d6d","executionInfo":{"status":"ok","timestamp":1758796646185,"user_tz":-330,"elapsed":35,"user":{"displayName":"GULLAPELLY ANVITH SAI","userId":"01437972785711821807"}},"outputId":"4430b760-f1e5-44b2-9f5a-1f3af30ad092"},"source":["class Student:\n","    def __init__(self, name, age, marks):\n","        # Basic data validation\n","        if not isinstance(name, str) or not name:\n","            raise ValueError(\"Name must be a non-empty string.\")\n","        if not isinstance(age, (int, float)) or age <= 0:\n","            raise ValueError(\"Age must be a positive number.\")\n","        if not isinstance(marks, list) or len(marks) != 3 or not all(isinstance(m, (int, float)) and 0 <= m <= 100 for m in marks):\n","            raise ValueError(\"Marks must be a list of 3 numbers between 0 and 100.\")\n","\n","        self._name = name  # Use underscore for internal attribute\n","        self._age = age\n","        self._marks = marks\n","\n","    @property\n","    def name(self):\n","        \"\"\"Get the student's name.\"\"\"\n","        return self._name\n","\n","    @property\n","    def age(self):\n","        \"\"\"Get the student's age.\"\"\"\n","        return self._age\n","\n","    @property\n","    def marks(self):\n","        \"\"\"Get the student's marks as a list.\"\"\"\n","        return self._marks\n","\n","    @property\n","    def total_marks(self):\n","        \"\"\"Calculate and return the total marks.\"\"\"\n","        return sum(self._marks)\n","\n","    def display_details(self):\n","        \"\"\"Display student details.\"\"\"\n","        print(f\"Name: {self.name}, Age: {self.age}\")\n","\n","# Example usage:\n","try:\n","    student1 = Student(\"Alice\", 17, [85, 90, 78])\n","    student1.display_details()\n","    print(f\"Total Marks: {student1.total_marks}\")\n","\n","    # Example of invalid data\n","    # student2 = Student(\"Bob\", -18, [95, 88]) # This will raise a ValueError\n","except ValueError as e:\n","    print(f\"Error creating student: {e}\")"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Name: Alice, Age: 17\n","Total Marks: 253\n"]}]},{"cell_type":"markdown","source":["OBSERVATION : A student class method to display student details and calculate their total scores from the 3 subjects the output shows the student name and age followed by their calculated total score"],"metadata":{"id":"ukb730mKdzU2"}},{"cell_type":"markdown","source":["Task Description #4 – Inefficient Loop Refactoring"],"metadata":{"id":"-xd2i0O5gCqH"}},{"cell_type":"markdown","source":["PROMPT : nums = [1,2,3,4,5,6,7,8,9,10] squares = [] for i in nums: squares.append(i * i) refactor the above inefficient loop"],"metadata":{"id":"bLwL5izvgLff"}},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"f17d1a2c","executionInfo":{"status":"ok","timestamp":1758797471550,"user_tz":-330,"elapsed":23,"user":{"displayName":"GULLAPELLY ANVITH SAI","userId":"01437972785711821807"}},"outputId":"16151c45-03d5-477f-f216-1dd4258e01e3"},"source":["nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n","squares = [i * i for i in nums]\n","print(squares)"],"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"]}]},{"cell_type":"markdown","source":["OBSERVATION : here the for loop is running inside the list while getting stored in the list squares[] both the tasks are being done at a time"],"metadata":{"id":"Fi8oahqCgQqn"}},{"cell_type":"code","source":[],"metadata":{"id":"UF8dultea1hl"},"execution_count":null,"outputs":[]}]}